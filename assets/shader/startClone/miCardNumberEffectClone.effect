// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  uniform PointData {
    vec2 firstPos;
    vec2 secondPos;
    vec2 worldFirstPos;
    vec2 worldScondPos;
    vec2 originPos;
  };


  vec2 getSymmetricPos(vec2 sp,vec2 pos1, vec2 pos2)
  { 
    float disX = pos2.x - pos1.x;
    float disY = pos2.y - pos1.y;
    if (disX == 0.0)
    {
        float x = pos1.x - sp.x;
        return vec2(pos1.x + x,sp.y);
    }
    //获取截线斜率
    float k1 = disY/disX;

    float y = (sp.y*k1*k1  + sp.x*k1 + k1*sp.x - k1*pos1.x*2.0 + pos1.y*2.0 - sp.y)/(1.0+k1*k1);
    float x = (y - sp.y)/(-1.0/k1)+sp.x;

    return vec2(x,y);
  }
  

  void main () {

    vec2 firstPoint = vec2(worldFirstPos.x - originPos.x , worldFirstPos.y - originPos.y);
    vec2 secondPoint = vec2(worldScondPos.x - originPos.x , worldScondPos.y - originPos.y);

    vec2 pos1 = vec2(firstPoint.x + (secondPoint.x - firstPoint.x)*0.5 , firstPoint.y + (secondPoint.y - firstPoint.y)*0.5);
    float k = ( secondPoint.y - firstPoint.y)/(secondPoint.x - firstPoint.x);
    k = -1.0/k;
    float b = (pos1.y - k*pos1.x);
    vec2 pos2 = vec2(0,b);

    vec2 sp = vec2(a_position.x - originPos.x, a_position.y - originPos.y);
    vec2 symmetricPos = getSymmetricPos(sp,pos1,pos2);
    symmetricPos.x = symmetricPos.x + originPos.x;
    symmetricPos.y = symmetricPos.y + originPos.y;
    vec4 pos = vec4(symmetricPos,a_position.z,1.0);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;         //这边计算得到的是DNC坐标系位置 cc_matViewProj应该是投影矩阵，cc_matWorld不知道是啥
    #else
    pos = cc_matViewProj * pos;                       //这边计算得到的是DNC坐标系位置，屏幕中间(0,0) 左上角(-1,1) 左下角(-1,-1)右边同理
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif
    

    v_color = a_color;

    gl_Position = pos ;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform PointData {
    vec2 firstPos;
    vec2 secondPos;
    vec2 worldFirstPos;
    vec2 worldScondPos;
    vec2 originPos;
  };

  //可以根据两个点来判断是否隐藏坐标
  bool isHide(vec2 sp){
    //如果是左右横向垂直搓牌的情况下
    if (secondPos.y == firstPos.y){
      float xw = (secondPos.x - firstPos.x)*0.5;
      if (  xw > 0.0  && xw - sp.x > 0.0){
        return true;
      }else if (xw < 0.0  && xw + sp.x > 0.0){
        return true;
      }
    }
    float firstY =  -firstPos.y;
    float secondY = -secondPos.y;
    //用直线方程判断点的位置是在y轴的上方还是下方
    float k = ( secondY - firstY)/(secondPos.x - firstPos.x);
    k = -1.0/k;
    float b = (firstY + (secondY - firstY)*0.5) -  k* (firstPos.x +(secondPos.x - firstPos.x)*0.5);
    float y = k*sp.x + b;
    //从上往下
    if (secondY - firstY < 0.0 && -sp.y > y){
        return true;
    }else if (secondY - firstY > 0.0 && -sp.y < y){    //从下往上
        return true;
    }
    return false;
  }


  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    if (!isHide(v_uv0)){
      o.a = 0.0;
    }

    gl_FragColor = o;
  }
}%
