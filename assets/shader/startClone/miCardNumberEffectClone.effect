// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  out vec4 v_firstPos;    //归一化第一个坐标
  out vec4 v_secondPos;   //归一化第二个坐标
  out vec4 v_originPos;   //归一化原点坐标
  out vec4 v_thisPos;     //归一化当前坐标坐标

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  uniform PointData {
    vec2 firstPos;
    vec2 secondPos;
    vec2 originPos;
    float xyRadio;
  };


  vec2 getSymmetricPos(vec2 sp,vec2 pos1, vec2 pos2)
  { 
    float disX = pos2.x - pos1.x;
    float disY = pos2.y - pos1.y;
    //获取截线斜率
    float k1 = disY/disX;

    float y = (sp.y*k1*k1  + sp.x*k1 + k1*sp.x - k1*pos1.x*2.0 + pos1.y*2.0 - sp.y)/(1.0+k1*k1);
    float x = (y - sp.y)/(-1.0/k1)+sp.x;

    return vec2(x,y);
  }
  

  void main () {

    vec4 pos = vec4(a_position,1.0);

    v_firstPos = vec4(firstPos,a_position.z,1.0);
    v_secondPos = vec4(secondPos,a_position.z,1.0);
    v_originPos = vec4(originPos,a_position.z,1.0);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    v_firstPos = cc_matViewProj * cc_matWorld * v_firstPos;
    v_secondPos = cc_matViewProj * cc_matWorld * v_secondPos;
    v_originPos = cc_matViewProj * cc_matWorld * v_originPos;
    #else
    pos = cc_matViewProj * pos;
    v_firstPos = cc_matViewProj * v_firstPos;
    v_secondPos = cc_matViewProj * v_secondPos;
    v_originPos = cc_matViewProj * v_originPos;
    #endif

    v_firstPos.x = v_firstPos.x - v_originPos.x;
    v_firstPos.y = (v_firstPos.y - v_originPos.y)*xyRadio;
    v_secondPos.x = v_secondPos.x - v_originPos.x;
    v_secondPos.y = (v_secondPos.y - v_originPos.y)*xyRadio;

    vec2 pos1 = vec2(v_firstPos.x + (v_secondPos.x - v_firstPos.x)*0.5 , v_firstPos.y + (v_secondPos.y - v_firstPos.y)*0.5);
    vec2 sp = vec2( pos.x - v_originPos.x, (pos.y - v_originPos.y)*xyRadio);
    //vec2 sp = vec2( pos.x , pos.y );
    if (v_secondPos.y - v_firstPos.y == 0.0)
    {
      float x = pos1.x - sp.x + pos1.x;
      if (sp.x > pos1.x){
        x = pos1.x - (sp.x - pos1.x );
      }
      pos.x = x;
      pos.y = sp.y;
    }else{
      float k = ( v_secondPos.y - v_firstPos.y)/(v_secondPos.x - v_firstPos.x);
      k = -1.0/k;
      float b = pos1.y -  k*pos1.x;
      vec2 pos2 = vec2(0,b);
      vec2 symmetricPos = getSymmetricPos(sp,pos1,pos2);
      pos.x = symmetricPos.x;
      pos.y = symmetricPos.y;
    }
    //pos.y = pos.y/xyRadio;
    //v_uv0.x = v_uv0.x*xyRadio;
    pos.x = pos.x + v_originPos.x;
    pos.y = pos.y + v_originPos.y;

    v_color = a_color;

    v_thisPos = vec4(pos);

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    gl_Position = pos ;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  in vec4 v_firstPos;    //归一化第一个坐标
  in vec4 v_secondPos;   //归一化第二个坐标
  in vec4 v_thisPos;    //归一化当前坐标坐标

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform PointData {
    vec2 firstPos;
    vec2 secondPos;
    vec2 originPos;
    float xyRadio;
  };

  //可以根据两个点来判断是否隐藏坐标
  bool isHide(){
    //如果是左右横向搓牌的情况下
    if (v_secondPos.y == v_firstPos.y){
      float xw = (v_secondPos.x - v_firstPos.x)*0.5;
      if (  xw > 0.0  && v_thisPos.x < xw + v_firstPos.x){
        return true;
      }else if (xw < 0.0  && v_thisPos.x > xw + v_firstPos.x){
        return true;
      }
    }
    //用直线方程判断点的位置是在y轴的上方还是下方
    float k = ( v_secondPos.y - v_firstPos.y)/(v_secondPos.x - v_firstPos.x);
    k = -1.0/k;
    float b = (v_firstPos.y + (v_secondPos.y - v_firstPos.y)*0.5) -  k* (v_firstPos.x +(v_secondPos.x - v_firstPos.x)*0.5);
    float y = k*v_thisPos.x + b;
    //从上往下
    if (v_secondPos.y  < v_firstPos.y && v_thisPos.y > y){
        return true;
    }else if (v_secondPos.y > v_firstPos.y && v_thisPos.y < y){    //从下往上
        return true;
    }
    return false;
  }


  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    if (isHide()){
      o.a = 0.0;
    }

    gl_FragColor = o;
  }
}%
