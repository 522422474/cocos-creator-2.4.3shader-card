{
  "ver": "1.0.25",
  "uuid": "d2d67542-91e6-433d-839c-9ea9d28d1804",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvarying vec4 v_firstPos;\nvarying vec4 v_secondPos;\nvarying vec4 v_originPos;\nvarying vec4 v_thisPos;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nuniform vec2 firstPos;\nuniform vec2 secondPos;\nuniform vec2 originPos;\nuniform float xyRadio;\nvec2 getSymmetricPos(vec2 sp,vec2 pos1, vec2 pos2)\n{\n  float disX = pos2.x - pos1.x;\n  float disY = pos2.y - pos1.y;\n  float k1 = disY/disX;\n  float y = (sp.y*k1*k1  + sp.x*k1 + k1*sp.x - k1*pos1.x*2.0 + pos1.y*2.0 - sp.y)/(1.0+k1*k1);\n  float x = (y - sp.y)/(-1.0/k1)+sp.x;\n  return vec2(x,y);\n}\nvoid main () {\n  vec4 pos = vec4(a_position,1.0);\n  v_firstPos = vec4(firstPos,a_position.z,1.0);\n  v_secondPos = vec4(secondPos,a_position.z,1.0);\n  v_originPos = vec4(originPos,a_position.z,1.0);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_firstPos = cc_matViewProj * cc_matWorld * v_firstPos;\n  v_secondPos = cc_matViewProj * cc_matWorld * v_secondPos;\n  v_originPos = cc_matViewProj * cc_matWorld * v_originPos;\n  #else\n  pos = cc_matViewProj * pos;\n  v_firstPos = cc_matViewProj * v_firstPos;\n  v_secondPos = cc_matViewProj * v_secondPos;\n  v_originPos = cc_matViewProj * v_originPos;\n  #endif\n  v_firstPos.x = v_firstPos.x - v_originPos.x;\n  v_firstPos.y = (v_firstPos.y - v_originPos.y)*xyRadio;\n  v_secondPos.x = v_secondPos.x - v_originPos.x;\n  v_secondPos.y = (v_secondPos.y - v_originPos.y)*xyRadio;\n  vec2 pos1 = vec2(v_firstPos.x + (v_secondPos.x - v_firstPos.x)*0.5 , v_firstPos.y + (v_secondPos.y - v_firstPos.y)*0.5);\n  vec2 sp = vec2( pos.x - v_originPos.x, (pos.y - v_originPos.y)*xyRadio);\n  if (v_secondPos.y - v_firstPos.y == 0.0)\n  {\n    float x = pos1.x - sp.x + pos1.x;\n    if (sp.x > pos1.x){\n      x = pos1.x - (sp.x - pos1.x );\n    }\n    pos.x = x;\n    pos.y = sp.y;\n  }else{\n    float k = ( v_secondPos.y - v_firstPos.y)/(v_secondPos.x - v_firstPos.x);\n    k = -1.0/k;\n    float b = pos1.y -  k*pos1.x;\n    vec2 pos2 = vec2(0,b);\n    vec2 symmetricPos = getSymmetricPos(sp,pos1,pos2);\n    pos.x = symmetricPos.x;\n    pos.y = symmetricPos.y;\n  }\n  pos.x = pos.x + v_originPos.x;\n  pos.y = pos.y + v_originPos.y;\n  v_color = a_color;\n  v_thisPos = vec4(pos);\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  gl_Position = pos ;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nvarying vec4 v_firstPos;\nvarying vec4 v_secondPos;\nvarying vec4 v_thisPos;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nbool isHide(){\n  if (v_secondPos.y == v_firstPos.y){\n    float xw = (v_secondPos.x - v_firstPos.x)*0.5;\n    if (  xw > 0.0  && v_thisPos.x < xw + v_firstPos.x){\n      return true;\n    }else if (xw < 0.0  && v_thisPos.x > xw + v_firstPos.x){\n      return true;\n    }\n  }\n  float k = ( v_secondPos.y - v_firstPos.y)/(v_secondPos.x - v_firstPos.x);\n  k = -1.0/k;\n  float b = (v_firstPos.y + (v_secondPos.y - v_firstPos.y)*0.5) -  k* (v_firstPos.x +(v_secondPos.x - v_firstPos.x)*0.5);\n  float y = k*v_thisPos.x + b;\n  if (v_secondPos.y  < v_firstPos.y && v_thisPos.y > y){\n      return true;\n  }else if (v_secondPos.y > v_firstPos.y && v_thisPos.y < y){\n      return true;\n  }\n  return false;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  if (isHide()){\n    o.a = 0.0;\n  }\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nout vec4 v_firstPos;\nout vec4 v_secondPos;\nout vec4 v_originPos;\nout vec4 v_thisPos;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nuniform PointData {\n  vec2 firstPos;\n  vec2 secondPos;\n  vec2 originPos;\n  float xyRadio;\n};\nvec2 getSymmetricPos(vec2 sp,vec2 pos1, vec2 pos2)\n{\n  float disX = pos2.x - pos1.x;\n  float disY = pos2.y - pos1.y;\n  float k1 = disY/disX;\n  float y = (sp.y*k1*k1  + sp.x*k1 + k1*sp.x - k1*pos1.x*2.0 + pos1.y*2.0 - sp.y)/(1.0+k1*k1);\n  float x = (y - sp.y)/(-1.0/k1)+sp.x;\n  return vec2(x,y);\n}\nvoid main () {\n  vec4 pos = vec4(a_position,1.0);\n  v_firstPos = vec4(firstPos,a_position.z,1.0);\n  v_secondPos = vec4(secondPos,a_position.z,1.0);\n  v_originPos = vec4(originPos,a_position.z,1.0);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_firstPos = cc_matViewProj * cc_matWorld * v_firstPos;\n  v_secondPos = cc_matViewProj * cc_matWorld * v_secondPos;\n  v_originPos = cc_matViewProj * cc_matWorld * v_originPos;\n  #else\n  pos = cc_matViewProj * pos;\n  v_firstPos = cc_matViewProj * v_firstPos;\n  v_secondPos = cc_matViewProj * v_secondPos;\n  v_originPos = cc_matViewProj * v_originPos;\n  #endif\n  v_firstPos.x = v_firstPos.x - v_originPos.x;\n  v_firstPos.y = (v_firstPos.y - v_originPos.y)*xyRadio;\n  v_secondPos.x = v_secondPos.x - v_originPos.x;\n  v_secondPos.y = (v_secondPos.y - v_originPos.y)*xyRadio;\n  vec2 pos1 = vec2(v_firstPos.x + (v_secondPos.x - v_firstPos.x)*0.5 , v_firstPos.y + (v_secondPos.y - v_firstPos.y)*0.5);\n  vec2 sp = vec2( pos.x - v_originPos.x, (pos.y - v_originPos.y)*xyRadio);\n  if (v_secondPos.y - v_firstPos.y == 0.0)\n  {\n    float x = pos1.x - sp.x + pos1.x;\n    if (sp.x > pos1.x){\n      x = pos1.x - (sp.x - pos1.x );\n    }\n    pos.x = x;\n    pos.y = sp.y;\n  }else{\n    float k = ( v_secondPos.y - v_firstPos.y)/(v_secondPos.x - v_firstPos.x);\n    k = -1.0/k;\n    float b = pos1.y -  k*pos1.x;\n    vec2 pos2 = vec2(0,b);\n    vec2 symmetricPos = getSymmetricPos(sp,pos1,pos2);\n    pos.x = symmetricPos.x;\n    pos.y = symmetricPos.y;\n  }\n  pos.x = pos.x + v_originPos.x;\n  pos.y = pos.y + v_originPos.y;\n  v_color = a_color;\n  v_thisPos = vec4(pos);\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  gl_Position = pos ;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nin vec4 v_firstPos;\nin vec4 v_secondPos;\nin vec4 v_thisPos;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform PointData {\n  vec2 firstPos;\n  vec2 secondPos;\n  vec2 originPos;\n  float xyRadio;\n};\nbool isHide(){\n  if (v_secondPos.y == v_firstPos.y){\n    float xw = (v_secondPos.x - v_firstPos.x)*0.5;\n    if (  xw > 0.0  && v_thisPos.x < xw + v_firstPos.x){\n      return true;\n    }else if (xw < 0.0  && v_thisPos.x > xw + v_firstPos.x){\n      return true;\n    }\n  }\n  float k = ( v_secondPos.y - v_firstPos.y)/(v_secondPos.x - v_firstPos.x);\n  k = -1.0/k;\n  float b = (v_firstPos.y + (v_secondPos.y - v_firstPos.y)*0.5) -  k* (v_firstPos.x +(v_secondPos.x - v_firstPos.x)*0.5);\n  float y = k*v_thisPos.x + b;\n  if (v_secondPos.y  < v_firstPos.y && v_thisPos.y > y){\n      return true;\n  }else if (v_secondPos.y > v_firstPos.y && v_thisPos.y < y){\n      return true;\n  }\n  return false;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  if (isHide()){\n    o.a = 0.0;\n  }\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}